[gd_resource type="ShaderMaterial" load_steps=12 format=2]

[ext_resource path="res://addons/shaderV/rgba/blur/zoomBlur.gd" type="Script" id=1]
[ext_resource path="res://addons/shaderV/tools/sinTime.gd" type="Script" id=2]

[sub_resource type="VisualShaderNodeCustom" id=1]
default_input_values = [ 2, -1.0, 3, Vector3( 0.5, 0.5, 0 ), 4, 20.0, 5, 0.005 ]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarConstant" id=2]
constant = 0.05

[sub_resource type="VisualShaderNodeScalarConstant" id=3]
constant = -1.0

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 5.0

[sub_resource type="VisualShaderNodeVec3Constant" id=5]
constant = Vector3( 0.5, 0.5, 0 )

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "texture"

[sub_resource type="VisualShaderNodeCustom" id=8]
default_input_values = [ 0, 1.0, 1, 1.0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShader" id=9]
code = "shader_type canvas_item;


// ZoomBlur

vec4 zoomBlurFunc(sampler2D _tex_z00m_blur, vec2 _uv_z00m_blur, int _amount_z00m_blur, vec2 _center_zoom, float _lgt_z00m_blur, float _lod_z00m_blur){
	vec4 _col_z00m_blur;
	if (_lod_z00m_blur < 0.0){
		_col_z00m_blur = texture(_tex_z00m_blur, _uv_z00m_blur);
		for (int i = 1; i <= _amount_z00m_blur; i++){
			float _temp_d_z00m_blur = _lgt_z00m_blur * float(i);
			vec2 px = _uv_z00m_blur * (1.0 - _temp_d_z00m_blur) + _center_zoom * _temp_d_z00m_blur;
			_col_z00m_blur += texture(_tex_z00m_blur, px);
		}
	}else{
		_col_z00m_blur = textureLod(_tex_z00m_blur, _uv_z00m_blur, _lod_z00m_blur);
		for (int i = 1; i <= _amount_z00m_blur; i++){
			float _temp_d_z00m_blur = _lgt_z00m_blur * float(i);
			vec2 px = _uv_z00m_blur * (1.0 - _temp_d_z00m_blur) + _center_zoom * _temp_d_z00m_blur;
			_col_z00m_blur += textureLod(_tex_z00m_blur, px, _lod_z00m_blur);
		}
	}
	_col_z00m_blur = _col_z00m_blur / float(_amount_z00m_blur + 1);
	return _col_z00m_blur;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:7

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Scalar:13
	float n_out13p0 = -1.000000;

// Vector:15
	vec3 n_out15p0 = vec3(0.500000, 0.500000, 0.000000);

// Scalar:14
	float n_out14p0 = 5.000000;

// Scalar:12
	float n_out12p0 = 0.050000;

// SinTIME:9
	float n_in9p0 = 1.00000;
	float n_out9p0;
	{
		n_out9p0 = n_out12p0 * sin(n_in9p0 * TIME);
	}

// ZoomBlur:11
	vec3 n_out11p0;
	float n_out11p1;
	{
		vec4 n_out11p0n_out11p1 = zoomBlurFunc(TEXTURE, n_out6p0.xy, int(n_out14p0), n_out15p0.xy, n_out9p0, n_out13p0);
		n_out11p0 = n_out11p0n_out11p1.rgb;
		n_out11p1 = n_out11p0n_out11p1.a;
	}

// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out11p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -230, -219 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 260, 0 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -220, -100 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -220, -180 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( -260, 240 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 0, 0 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( -520, 340 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( -260, -20 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( -260, 160 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( -400, 60 )
nodes/fragment/connections = PoolIntArray( 11, 0, 0, 0, 6, 0, 11, 1, 12, 0, 9, 1, 9, 0, 11, 5, 13, 0, 11, 2, 14, 0, 11, 4, 15, 0, 11, 3, 7, 0, 11, 0, 11, 1, 0, 1 )

[resource]
shader = SubResource( 9 )
